# -*- coding: utf-8 -*-
import telebot
from telebot import *
import time

try:
	bot = telebot.TeleBot('878479849:AAE6JYUMCYfslkFC_ZOGsh9SQCx3BXL3tTQ')

	@bot.message_handler(content_types = ['text'])
	@bot.edited_message_handler(content_types = ['text'])
	def send_echo(message):

		mt = message.text
		mid = message.chat.id
		name = message.from_user.first_name

		mt = mt.lower()
		try:
			if mt == 'протокол':
				answer = '''
		Протокол HTTP.

		HTTP (англ. HyperText Transfer Protocol — «протокол передачи гипертекста») — протокол прикладного уровня передачи данных изначально — в виде гипертекстовых документов в формате «HTML», в настоящий момент используется для передачи произвольных данных. Основой HTTP является технология «клиент-сервер», то есть предполагается существование:
		Потребителей (клиентов), которые инициируют соединение и посылают запрос;
		Поставщиков (серверов), которые ожидают соединения для получения запроса, производят необходимые действия и возвращают обратно сообщение с результатом.
		HTTP в настоящее время повсеместно используется во Всемирной паутине для получения информации с веб-сайтов. В 2006 году — в Северной Америке доля HTTP-трафика превысила долю P2P-сетей и составила 46 %, из которых почти половина — это передача потокового видео и звука[1].
		HTTP используется также в качестве «транспорта» для других протоколов прикладного уровня, таких как SOAP, XML-RPC, WebDAV.
		HTTP — протокол прикладного уровня; аналогичными ему являются FTP и SMTP. Обмен сообщениями идёт по обыкновенной схеме «запрос-ответ». Для идентификации ресурсов HTTP использует глобальные URI. В отличие от многих других протоколов, HTTP не сохраняет своего состояния. Это означает отсутствие сохранения промежуточного состояния между парами «запрос-ответ». Компоненты, использующие HTTP, могут самостоятельно осуществлять сохранение информации о состоянии, связанной с последними запросами и ответами (например, «куки» на стороне клиента, «сессии» на стороне сервера). Браузер, посылающий запросы, может отслеживать задержки ответов. Сервер может хранить IP-адреса и заголовки запросов последних клиентов. Однако сам протокол не осведомлён о предыдущих запросах и ответах, в нём не предусмотрена внутренняя поддержка состояния, к нему не предъявляются такие требования.
		'''
				bot.send_message(mid, answer)
				
			elif 'стандартизация' in mt:
				answer = '''
		Стандартизация в Интернете.

Ярким примером открытой системы является Интернет. Эта международная сеть развивалась в полном соответствии с требованиями, предъявляемыми к открытым системам. В разработке ее стандартов принимали участие тысячи специалистов-пользователей этой сети из различных университетов, научных организаций и фирм-производителей вычислительной аппаратуры и программного обеспечения, работающих в разных странах.
Само название стандартов, определяющих работу Интернета, — темы для обсуждения (Request For Comments, RFC) — показывает гласный и открытый характер принимаемых стандартов. В результате Интернет сумел объединить в себе разнообразное оборудование и программное обеспечение огромного числа сетей, разбросанных по всему миру.
Ввиду постоянной растущей популярности Интернета документы RFC становятся международными стандартами де-факто, многие из которых затем приобретают статус официальных международных стандартов в результате их утверждения какой-либо организацией по стандартизации, как правило, ISO и ITU-T.
Существует несколько организационных подразделений, отвечающих за развитие и, в частности, за стандартизацию архитектуры и протоколов Интернета. Основным из них является научно-административное сообщество Интернета (Internet Society, ISOC), объединяющее около 100 ОО О человек, которое занимается социальными, политическими и техническими проблемами эволюции Интернета.
Под управлением ISOC работает совет по архитектуре Интернета (Internet Architecture Board, IAB). В IAB входят две основные группы: Internet Research Task Force (IRTF) и Internet Engineering Task Force (IETF). IRTF координирует долгосрочные исследовательские проекты по протоколам TCP/IR IETF — это инженерная группа, которая занимается решением текущих технических проблем Интернета. Именно IETF определяет спецификации, которые затем становятся стандартами Интернета. Процесс разработки и принятия стандарта для протокола Интернета состоит из ряда обязательных этапов, или стадий, включающих непременную экспериментальную проверку.
В соответствии с принципом открытости Интернета все документы RFC, в отличие, скажем, от стандартов ISO, находятся в свободном доступе.'''
				bot.send_message(mid, answer)
					
			elif 'система' in mt:
				answer1 = '''
		Система доменных имен DNS. Схема работы системы.

DNS (англ. Domain Name System «система доменных имён») — компьютерная распределённая система для получения информации о доменах. Чаще всего используется для получения IP-адреса по имени хоста (компьютера или устройства), получения информации о маршрутизации почты, обслуживающих узлах для протоколов в домене (SRV-запись).
Распределённая база данных DNS поддерживается с помощью иерархии DNS-серверов, взаимодействующих по определённому протоколу.
Основой DNS является представление об иерархической структуре доменного имени и зонах. Каждый сервер, отвечающий за имя, может делегировать ответственность за дальнейшую часть домена другому серверу (с административной точки зрения — другой организации или человеку), что позволяет возложить ответственность за актуальность информации на серверы различных организаций (людей), отвечающих только за «свою» часть доменного имени.
Начиная с 2010 года в систему DNS внедряются средства проверки целостности передаваемых данных, называемые DNS Security Extensions (DNSSEC). Передаваемые данные не шифруются, но их достоверность проверяется криптографическими способами. Внедряемый стандарт DANE обеспечивает передачу средствами DNS достоверной криптографической информации (сертификатов), используемых для установления безопасных и защищённых соединений транспортного и прикладного уровней.
DNS (Domain Name System, «система доменных имён») — компьютерная распределённая система для получения информации о доменах. Основная область применения данной системы — преобразование имени хоста в IP-адрес и предоставления данных о маршрутизации почты. Хост — это любой компьютер или сервер, подключенный к локальной сети или интернету.

Принцип работы
Схематичное представление процесса определения определения IP-адреса по вводимому имени домена
Работа DNS достаточно проста, но из-за незнания её основ возникает основная масса проблем и вопросов при переносе существующего доменного имени и регистрации нового.
Остановимся немного подробней на описании самой схемы.
	Когда пользователь запускает веб-браузер и вводит название домена сайта, его ПК отправляет запрос к DNS-серверу интернет-провайдера для получения IP-адреса, на котором находится домен (1).
	Если DNS-серверы провайдера не обнаруживают в своем кэше информации о запрашиваемом сайте, то отправляют запрос на корневые DNS-серверы (2).
	Корневой DNS-сервер ищет в своей базе данных информацию о серверах имен хостинг-провайдера, на которых присутствует этот сайт. Далее, он сообщает их кэширующему DNS-серверу провайдера (3).
	После того, как кэширующий DNS-сервер интернет-провайдера получает информацию о серверах имен хостинг-провайдера он опрашивает любой из них (4) и, в случае получения положительного результата получения IP-адреса (5), помещает в кэш. Кэширование используется для того, чтобы снизить как нагрузку на интернет-каналы, так и для ускорения получения результата запроса.
	После этого DNS-сервер провайдера передает IP-адрес браузеру пользователя, совершившему запрос сайта (6).
	И уже после этого браузер, получив IP-адрес запрашиваемого сайта, переходит на сам сайт (7 и 8).'''
				answer2 = '''
Важно, что обновление информации о сервера имен провайдера происходит не мгновенно, а через некоторое определенное (для каждого DNS-сервера, в зависимости от настроек и провайдера данные значения могут варьироваться) время.
Так же если кто-либо из пользователей вашего интернет-провайдера заходил на сайт и после этого сайт изменил IP-адрес или сервера имен, то в базе данных кеширующего DNS-сервера провайдера останется старая информация до тех пор, пока кеш не обновится. И до этого момента при запросе сайта будет предоставляться устаревшая информация о месторасположении (IP-адрес). Хотя пользователям с других провайдеров сайт может открываться уже с нового IP-адреса.'''
				bot.send_message(mid, answer1)
				bot.send_message(mid, answer2)

			elif 'прокси' in mt:
				answer = '''
		Прокси-сервер.

Прокси-сервер (от англ. proxy — «представитель», «уполномоченный»; в связи с этим общеупотребительным является сокращение термина просто до Прокси), иначе - сервер-посредник — промежуточный сервер (комплекс программ) в компьютерных сетях, выполняющий роль посредника между пользователем и целевым сервером (при этом о посредничестве могут как знать, так и не знать обе стороны), позволяющий клиентам как выполнять косвенные запросы (принимая и передавая их через прокси-сервер) к другим сетевым службам, так и получать ответы. Сначала клиент подключается к прокси-серверу и запрашивает какой-либо ресурс (например e-mail), расположенный на другом сервере. Затем прокси-сервер либо подключается к указанному серверу и получает ресурс у него, либо возвращает ресурс из собственного кэша (в случаях, если прокси имеет свой кэш). В некоторых случаях запрос клиента или ответ сервера может быть изменён прокси-сервером в определённых целях. Прокси-сервер позволяет защищать компьютер клиента от некоторых сетевых атак и помогает сохранять анонимность клиента, но также может использоваться мошенниками для скрытия адреса сайта, уличённого в мошенничестве, изменения содержимого целевого сайта (подмена), а также перехвата запросов самого пользователя.
Чаще всего прокси-серверы применяются для следующих целей:
•	Обеспечение доступа компьютеров локальной сети к сети Интернет.
•	Кэширование данных: 
•	Сжатие данных: 
•	Защита локальной сети от внешнего доступа: 
•	Ограничение доступа из локальной сети к внешней
•	Анонимизация доступа к различным ресурсам. 
Прокси-сервер, к которому может получить доступ любой пользователь сети интернет, называется открытым.
Прозрачный прокси — схема связи, при которой трафик или его часть перенаправляется на прокси-сервер неявно (средствами маршрутизатора). При этом клиент может использовать все преимущества прокси-сервера без дополнительных настроек браузера (или другого приложения для работы с интернетом). Пример: route -p add 10.32.5.5 mask 255.255.255.255 10.32.1.14
Обратный прокси — прокси-сервер, который, в отличие от прямого, ретранслирует запросы клиентов из внешней сети на один или несколько серверов, логически расположенных во внутренней сети. Часто используется для балансировки сетевой нагрузки между несколькими веб-серверами и повышения их безопасности, играя при этом роль межсетевого экрана на прикладном уровне.
Классификация прокси-серверов для целей анонимизации представлена в статье Веб-прокси.'''
				bot.send_message(mid, answer)

			elif 'методы' in mt:
				keyboard = types.InlineKeyboardMarkup()
				callback_button1 = types.InlineKeyboardButton(text="Методы запроса клиента. GET, POST.", callback_data="getpost")
				callback_button2 = types.InlineKeyboardButton(text="Методы аутентификации в интернет. COOKIE. Установка cookie с помощью HTML.", callback_data="cookie")
				keyboard.add(callback_button1)
				keyboard.add(callback_button2)
				bot.send_message(mid, "Выбери", reply_markup=keyboard)

			elif 'технология' in mt:
				keyboard = types.InlineKeyboardMarkup()
				callback_button1 = types.InlineKeyboardButton(text="Технология создания приложений, исполняющихся на стороне клиента.(JavaScript).", callback_data="tech_javascript")
				callback_button2 = types.InlineKeyboardButton(text="Технология создания приложений, исполняющихся на стороне сервера. (CGI-PERL, PHP).", callback_data="tech_perl")
				callback_button3 = types.InlineKeyboardButton(text="Технология CGI, заголовки ответов и запросов по CGI.", callback_data="tech_cgi")
				keyboard.add(callback_button1)
				keyboard.add(callback_button2)
				keyboard.add(callback_button3)
				bot.send_message(mid, "Выбери", reply_markup=keyboard)

			elif 'основы' in mt:
				answer = '''
		Основы языка РНР. Создание Web-приложений средствами РНР.


		'''
				bot.send_message(mid, answer)
					
			elif 'назначение' in mt:
				keyboard = types.InlineKeyboardMarkup()
				callback_button1 = types.InlineKeyboardButton(text="Назначение языка PHP. Преимущества и недостатки языка PHP. Типы данных в РНР. Операции и выражения в РНР. Строки в РНР.", callback_data="naznach_php")
				callback_button2 = types.InlineKeyboardButton(text="Назначение FTP протокола, формат адреса FTP-ресурса, FTP-сервер и клиент.", callback_data="naznach_ftp")
				callback_button3 = types.InlineKeyboardButton(text="Назначение протоколов Telnet и NNTP.", callback_data="naznach_telnet")
				keyboard.add(callback_button1)
				keyboard.add(callback_button2)
				keyboard.add(callback_button3)
				bot.send_message(mid, "Выбери", reply_markup=keyboard)

			elif 'управляющие' in mt:
				answer = '''
		Управляющие структуры. HTML-формы и РНР. Массивы и списки.


		'''
				bot.send_message(mid, answer)

			elif 'функции' in mt:
				answer = '''
		Функции. Файлы и каталоги PHP. Регулярные выражения. Определение даты и времени.


		'''
				bot.send_message(mid, answer)

			elif 'особенности' in mt:
				answer = '''
		Особенности языка PHP по передачи на сервер данных введенных пользователем. Механизм обработки форм в PHP.


		'''
				bot.send_message(mid, answer)

			elif 'mysql' in mt:
				answer = '''
		MySQL. Проектирование базы данных и обеспечение прав доступа к ней.


		'''
				bot.send_message(mid, answer)
					
			elif 'создание' in mt:
				answer = '''
		Создание и удаление баз данных и таблиц. Типы данных в MySQL. Добавление данных в таблицу. Изменение и удаление данных.


		'''
				bot.send_message(mid, answer)

			elif 'запросы' in mt:
				answer = '''
		Запросы на извлечение данных в MySQL.


		'''
				bot.send_message(mid, answer)

			elif 'php' in mt:
				answer = '''
		PHP+MYSQL: создание простого Web сайта.


		'''
				bot.send_message(mid, answer)

			elif 'понятие' in mt:
				keyboard = types.InlineKeyboardMarkup()
				callback_button1 = types.InlineKeyboardButton(text="Понятие о Web-технологиях передачи и обработки информации.", callback_data="ponyatiye_web")
				callback_button2 = types.InlineKeyboardButton(text="Понятие CSS. основные понятия и определения. Синтаксис языка стилей. Правила стилей.", callback_data="ponyatiye_css")
				keyboard.add(callback_button1)
				keyboard.add(callback_button2)
				bot.send_message(mid, "Выбери", reply_markup=keyboard)

			elif 'сервисы' in mt:
				answer = '''
		Сервисы сети Интернет. Система WWW. Понятие web-сервера. URL. Хостинг.

	ОСНОВНЫЕ СЕРВИСЫ ИНТЕРНЕТ
	Постоянное развитие информационных технологий приводит к появлению разнообразных информационных ресурсов, отличающихся друг от друга формами представления и методами обработки составляющих их информационных объектов. Поэтому в настоящее время в Интернет существует достаточно большое количество сервисов, обеспечивающих работу со всем спектром ресурсов. Наиболее известными среди них являются:
	 - электронная почта (E-mail), обеспечивающая возможность обмена сообщениями одного человека с одним или несколькими абонентами;
	 - телеконференции, или группы новостей (Usenet), обеспечивающие возможность коллективного обмена сообщениями;
	 - сервис FTP – система файловых архивов, обеспечивающая хранение и пересылку файлов различных типов;
	 - сервис Telnet, предназначенный для управления удаленными компьютерами в терминальном режиме;
	World Wide Web (WWW, W3) – гипертекстовая (гипермедиа) система, предназначенная для интеграции различных сетевых ресурсов в единое информационное пространство;
	сервис DNS, или система доменных имен, обеспечивающий возможность использования для адресации узлов сети мнемонических имен вместо числовых адресов;
	сервис IRC, предназначенный для поддержки текстового общения в реальном времени (chat);
	Перечисленные выше сервисы относятся к стандартным. Это означает, что принципы построения клиентского и серверного программного обеспечения, а также протоколы взаимодействия сформулированы в виде международных стандартов. Следовательно, разработчики программного обеспечения при практической реализации обязаны выдерживать общие технические требования. 
	Наряду со стандартными сервисами существуют и нестандартные, представляющие собой оригинальную разработку той или иной компании. В качестве примера можно привести различные системы типа Instant Messenger (своеобразные Интернет-пейджеры – ICQ, AOl, Demos on-line и т.п.), системы Интернет-телефонии, трансляции радио и видео и т.д. Важной особенностью таких систем является отсутствие международных стандартов, что может привести к возникновению технических конфликтов с другими подобными сервисами.
	WWW - это электронная информационная система, являющаяся частью всемирной компьютерной сети Internet. Сейчас WWW распространяется настолько широко, что иногда даже само слово Internet применяют в качестве синонима для WWW, хотя в Internet работают и другие важные системы - электронная почта, FTP и т.д.
	Веб-сервер — сервер, принимающий HTTP-запросы от клиентов, обычно веб-браузеров, и выдающий им HTTP-ответы, как правило, вместе с HTML-страницей, изображением, файлом, медиа-потоком или другими данными
	URL – сокращенное название термина Uniform Resource Locator. Он используется для задания расположения файлов на других серверах в сети Интернет.
	URL включает в себя следующее:
	- протокол доступа, то есть способ осуществления доступа к ресурсу (telnet, gopher, ftp, WAIS, http и file);
	- точный путь к файлу на сервере;
	- сетевой адрес веб-ресурса (имя домена и хост-машины).
	Формат имеет следующий вид:
		method://host.domain[:port]/path/filename, где method принимает одно из значений:
			file – файл, расположенный либо на Вашей локальной системе, либо на anonymous FTP сервере;
			http – файл, расположенный на World Wide Web сервере;
			WAIS – файл расположенный на Wide Area Information Server сервере;
			gopher – файл, расположенный на Gopher сервере;
			telnet – означает выход на веб-ресурсы Telnet;
			News – комплекс новостей Usenet.'''
				bot.send_message(mid, answer)
					
			elif 'среды' in mt:
				answer = '''
		Среды применения Web-технологий.

	Основные понятия веб-технологий: веб-страница и веб-сайт. Их не стоит путать.
	Веб-страница – это минимальная единица сервиса WWW. По-сути это документ, который уникализирован в WWW своим URL адресом.
	Веб-сайт – это набор веб-страниц, связанных общей тематикой. Веб-сайт находится на одном сервере (хостинге) и принадлежит одному владельцу. Как вариант, веб-сайт может состоять из одной веб-страницы (сайт – визитка). Совокупностью всех веб-сайтов и образуют всемирную паутину, WWW – сервиса Интернет, созданного для поиска и обмена нужной информации.
	Как строятся веб-страницы
	Веб-страница строится на основе языка разметки гипертекста. Официальное название этого языка HTML (Hyper Text Markup Language).
	Для отражения содержимого на веб-страницы созданы и служат каскадные таблицы стилей, иначе CSS.
	В создании динамических страниц, на помощь разработчикам «приходят» языки скриптов. Самый популярный язык JavaScript.
	В принципе, с помощью этих трех языков HTML, CSS, JavaScript можно создать любую, даже самую сложную, веб — страницу, а созданные веб-страницы собрать в веб-сайт.
	Динамический HTML
	Чтобы браузеры отображали созданные веб-страницы, а браузеры видят веб-страницу, как набор объектов, был создан  стандарт DOM (Document Object Model). Согласно нему, веб-стрнаница должна представляться в виде набора объектов, а сам стандарт DOM называется объектная модель документа.
	DOM связан с JavaScript, а по сути, эта модель связывает веб-страницы со скриптами или языками программирования.
	Связку HTML, CSS, JavaScript и DOM называют динамическим HTML или Dynamic HTML, а иногда DHTML.
	Язык разметки XML
	Язык разметки XML или XML – ExtensibleMarkupLanguage это описание синтаксиса современного языка HTML.
	Выводы
	Подводя итоги, отмечу, что основная цель в изучении веб-технологий это создание или изменение веб-страниц, которые будут правильно отражаться в браузерах. Также введение в web-технологии поможет вам читать коды ваших веб-страниц, что, несомненно, нужно для любого владельца веб ресурсов.'''
				bot.send_message(mid, answer)

			elif 'клиент' in mt:
				answer = '''
		Клиент-серверная архитектура в Интернет.

	Архитектура клиент – сервер (client-server architecture) – это концепция информационной сети, в которой основная часть ее ресурсов сосредоточена в серверах, обслуживающих своих клиентов. Рассматриваемая архитектура определяет два типа компонентов: серверы и клиенты.
	Сервер - это объект, предоставляющий сервис другим объектам сети по их запросам. Сервис – это процесс обслуживания клиентов.
	Сервер работает по заданиям клиентов и управляет выполнением их заданий. После выполнения каждого задания сервер посылает полученные результаты клиенту, пославшему это задание.
	Сервисная функция в архитектуре клиент – сервер описывается комплексом прикладных программ, в соответствии с которым выполняются разнообразные прикладные процессы.'''
				bot.send_message(mid, answer)

			elif 'понятия' in mt:
				answer = '''
		Понятия ISP, POP,NAP, ''последняя миля‘’ в Интернет.

	ISP (Интернет-провайдер; англ. InternetService Provider) — организация, предоставляющая пользователям доступ к сети Интернет и связанные с этим услуги.
	POP (англ. Post Office Protocol Version 3 — протокол почтового отделения, версия 3) — стандартный интернет-протокол прикладного уровня, используемый клиентами электронной почты для получения почты с удалённого сервера по TCP-соединению.
	Network Access Protection (NAP) — защита доступа к сети — технология компании Microsoft, предназначенная для контроля доступа к сети предприятия, исходя из информации о состоянии системы подключающегося компьютера. Впервые была реализована в Windows XP Service Pack 3, Windows Vista и Windows Server 2008.
	С помощью NetWork Access Protection администраторы компании могут поддерживать состояние «здоровья» сети. Параметры системы клиента проверяются на соответствие политике безопасности, например: наличие свежих обновлений операционной системы, наличие антивирусной программы и состояние её обновлений, установлен и работает ли на клиенте сетевой экран. На основе этих параметров каждый компьютер получает свою оценку безопасности. Компьютер, удовлетворяющий требованиям системы контроля, получает доступ в сеть предприятия. Компьютеры, не удовлетворяющие требованиям безопасности, не смогут получить доступа в сеть или смогут получить доступ лишь в изолированную часть сети, предоставляющую сервисы для достижения клиентом требуемого уровня безопасности.
	Последняя миля — канал, соединяющий конечное (клиентское) оборудование с узлом доступа провайдера (оператора связи) . Например, при предоставлении услуги подключения к сети Интернет последняя миля — участок от порта коммутатора провайдера на его узле связи до порта маршрутизатора клиента в его офисе.'''
				bot.send_message(mid, answer)

			elif 'варианты' in mt:
				answer = '''
		Варианты доступа в Интернет для различных категорий пользователей и из сетей различного уровня.

	В настоящее время существует множество способов соединения с сетью Интернет от подключения компьютера посредством аналогового модема до способов подключения с использованием высокоскоростных технологий.
	Способ подключения компьютера к сети Интернет зависит от используемого пользователем уровня услуг, которые он хочет получить от провайдера (поставщика услуг), от скорости и качества передачи данных. К услугам, которые предоставляются Интернет, относятся: E-mail, WWW, FTP, Usenet, IP - телефония, потоковое видео и т.д.
	Способы подключения к Интернет можно классифицировать по следующим видам:
	•	коммутируемый доступ;
	•	доступ по выделенным линиям;
	•	доступ по широкополосной сети (DSL - Digital Subscriber Line);
	•	доступ к Интернет по локальной сети;
	•	спутниковый доступ в Интернет;
	•	доступ к Интернет с использованием каналов кабельной телевизионной сети;
	•	беспроводные технологии.
	Перспективным методом подключения к Интернет, как для физических лиц, так и для компаний является широкополосная сеть DSL. Digital Subscriber Line - семейство цифровых абонентских линий, предназначенных для организации доступа по аналоговой телефонной сети, используя DSL/кабельный модем. Этот способ обеспечивает передачу данных до 50 Мбит/с.
	Спутниковый доступ к Интернет (DirecPC, Europe Online) является популярным для пользователей удаленных районов. Максимальная скорость приема данных до 52,5 Мбит/с (реальная средняя скорость до 3 Мбит/с).
	Пользователи кабельного телевидения для подключения к Интернет могут использовать каналы кабельной телевизионной сети, при этом скорость приема данных от 2 до 56 Мб/сек. Для организации подключения к кабельной телевизионной сети используется кабельный модем.'''
				bot.send_message(mid, answer)

			elif 'web' in mt:
				keyboard = types.InlineKeyboardMarkup()
				callback_button1 = types.InlineKeyboardButton(text="Web-интеграция.", callback_data="web_integracia")
				callback_button2 = types.InlineKeyboardButton(text="Web-технологии в сетях различного уровня.", callback_data="web_tech")
				keyboard.add(callback_button1)
				keyboard.add(callback_button2)
				bot.send_message(mid, "Выбери", reply_markup=keyboard)
					
			elif 'браузеры' in mt:
				answer1 = '''
		Браузеры и серверы. Прокси-сервер. Формат URL – адреса.

	Браузер, или веб-обозреватель — прикладное программное обеспечение для просмотра страниц, содержания веб-документов, компьютерных файлов и их каталогов; управления веб-приложениями; а также для решения других задач.
	Сервер – это компьютер, который предназначен для решения определенных задач по выполнению программных кодов, хранению информации, обслуживанию пользователей и баз данных. Для обеспечения их бесперебойной работы предоставляется услуга Colocation, позволяющая размещать сервера на специальной оборудованной площадке с круглосуточной технической поддержкой, называемой Дата-Центром. Сервер обеспечивает максимальную защищенность и безопасность выполняемых задач, а также их сохранность. Используется сервер для хранения файлов и веб-сайтов пользователей Интернета (хостинг), ответа на запросы и выдачи запрашиваемой информации, обработки и выполнения скриптов на веб-сайтах, работы с базой данных и большим количеством пользователей.
	Прокси-сервер, иначе - сервер-посредник — промежуточный сервер в компьютерных сетях, выполняющий роль посредника между пользователем и целевым сервером, позволяющий клиентам как выполнять косвенные запросы к другим сетевым службам, так и получать ответы.
	Возможности применения прокси-сервера:
	•	Анонимность: путем переключения прокси-сервера вы можете скрыть свой собственный IP-адрес таким образом, чтобы ваше настоящее местоположение было не видно другим участникам сети. Как использовать прокси-сервер для анонимного серфинга в сети, вы можете прочитать в нашей статье «Выходим в Интернет анонимно: как оставаться незамеченным в Сети«. Но будьте осторожны! Владелец прокси-сервера полностью контролирует ваш сеанс и может записывать все ваши сообщения, а также манипулировать веб-контентом, если захочет.
	•	Кэширование: данные кэшируются прокси-сервером для ускорения обработки повторяющихся запросов. Если, например, клиент регулярно запрашивает один и тот же документ Word, его можно получить непосредственно с прокси-сервера без необходимости подключения к фактическому целевому серверу. Это часто экономит предприятию пропускную способность сервера, а, следовательно, деньги компании.
	•	Фильтрация: прокси-серверы также могут использовать фильтры для оценки входящих запросов, позволяя пропускать только определенные типы запросов. Такую услугу часто используют в корпоративных сетях, когда блокируются конкретные услуги, такие как возможность скачивать файлы с хостингов или доступ к сайтам с запрещенным содержимым.
	        Формат URL – адреса:
	В общем случае формат URL имеет вид: (протокол доступа) [://<домен>: <порт>](/<директория><имя ресурса>[/<параметры запроса>].
	Первая часть URL соответствует используемому протоколу доступа, к примеру http:// (протокол передачи гипертекста), ftp:// (File Transfer Protocol – протокол передачи файлов) и т.д.
	'''
				answer2 = '''
	Вторая часть URL-адреса указывает доменное имя, а также может указывать номер порта. Любой сервер предоставляет сервис, используя нумерованные порты. При этом каждая служба имеет свой номер порта. Клиенты подключаются к сервису по уникальному IP-адресу (об IP-адресах мы рассказывали в одной из предыдущих статей данного цикла, см. КомпьютерПресс № 5’2002) и по конкретному номеру порта. Так, в случае если на компьютере запущены Web-сервер и FTP-сервер, то обычно Web-сервер будет доступен по порту 80, а FTP-сервер – по порту 21. Каждый из распространенных сервисов имеет свой стандартный номер порта: WWW – 80, ftp – 21, echo – 7, telnet – 23, smtp – 25, gopher – 70 и т.д.
	Третья часть URL-адреса – путь доступа к файлу – аналогичен пути к файлу на клиентском компьютере. В случае если данный путь не указан, по умолчанию используется стандартный отклик, определяемый в настройках Web-сервера. В частности, стандартным откликом на HTTP-запрос для ряда Web-серверов служит вывод файла с именем Index.html, тогда как в Internet Information Services можно указать, к какому ресурсу произойдет обращение по умолчанию.
	'''
				bot.send_message(mid, answer1)
				bot.send_message(mid, answer2)

			elif 'компьютерные' in mt:
				answer = '''
		Компьютерные сети. Иерархия сетей в Интернет.

	Компьютерная сеть - объединение нескольких ЭВМ для совместного решения информационных, вычислительных, учебных и других задач.
	Все компьютерные сети без исключения имеют одно назначение-обеспечение совместного доступа к общим ресурсам. Слово ресурс очень удобное. Ресурсы бывают трех видов: аппаратные, программные, информационные.
	Аппаратные ресурсы – это, когда все участники компьютерной сети пользуются одним аппаратом, например, принтером или используют один компьютер с увеличенной емкостью жесткого диска (файловый сервер), на котором хранят свои архивы и результаты работы.
	Компьютерные сети позволяют совместно использовать программные ресурсы. Так, например, для выполнения сложных и продолжительных расчетов можно подключиться к удаленной большой ЭВМ и отправить вычислительное задание на нее, по окончании расчетов получить результат обратно.
	Данные, хранящиеся на удаленных компьютерах, образуют информационный ресурс, например, Интернет.
	По способу организации сети подразделяются на реальные и искусственные.
	Искусственные сети (псевдосети) позволяют связывать компьютеры вместе через последовательные или параллельные порты и не нуждаются в дополнительных устройствах.
	Реальные сети позволяют связывать компьютеры с помощью специальных устройств коммутации и физической среда передачи данных.
	По территориальной распространенности сети могут быть локальными, глобальными, региональными и городскими.
	По скорости передачи информации компьютерные сети делятся на низко-, средне- и высокоскоростные.
	низкоскоростные (до 10 Мбит/с),
	среднескоростные (до 100 Мбит/с),
	высокоскоростные (свыше 100 Мбит/с);
	Городская сеть (MAN - Metropolitan Area NetWork) - сеть, которая обслуживает информационные потребности большого города.
	Региональные - расположенные на территории города или области.
	Сети, в пределах одного здания, объединяющие от 2 до 300 компьютеров, которые принадлежат обычно одной организации (или одной семье), называются локальными вычислительными сетями.
	Глобальные сети - WAN (Worldwide Area Network) объединяют сотни, тысячи узлов во многих странах мира.'''
				bot.send_message(mid, answer)

			elif 'передача' in mt:
				answer = '''
		Передача информации в Интернет.


		'''
				bot.send_message(mid, answer)

			elif 'стек' in mt:
				answer = '''
		Стек протоколов TCP/IP.


		'''
				bot.send_message(mid, answer)

			elif 'процесс' in mt:
				answer = '''
		Процесс IP – маршрутизации. Адресация в Интернет.


		'''
				bot.send_message(mid, answer)
					
			elif 'надежность' in mt:
				answer = '''
		Надежность передачи информации в Интернет.


		'''
				bot.send_message(mid, answer)

			elif 'надёжность' in mt:
				answer = '''
		Надежность передачи информации в Интернет.


		'''
				bot.send_message(mid, answer)

			elif 'протоколы' in mt:
				answer = '''
		Протоколы прикладного уровня модели OSI.


		'''
				bot.send_message(mid, answer)

			elif 'электронная' in mt:
				answer = '''
		Электронная почта, протоколы SMTP, POP3, почтовый сервер и клиент.


		'''
				bot.send_message(mid, answer)

			elif 'технологии' in mt:
				keyboard = types.InlineKeyboardMarkup()
				callback_button1 = types.InlineKeyboardButton(text="Технологии создания Web-приложений.", callback_data="tech_web")
				callback_button2 = types.InlineKeyboardButton(text="Технологии исполняющиеся на стороне клиента и сервера. Механизм работы Web-сервера.", callback_data="tech_exe")
				callback_button3 = types.InlineKeyboardButton(text="Технологии создания приложений на основе многоуровневой архитектуры клиент- Web-сервер-сервер баз данных.", callback_data="tech_sozdaniya")
				keyboard.add(callback_button1)
				keyboard.add(callback_button2)
				keyboard.add(callback_button3)
				bot.send_message(mid, "Выбери", reply_markup=keyboard)
					
			elif 'dom' in mt:
				answer = '''
		DOM - «объектная модель документа». Регулярные выражения.

Объектная Модель Документа (DOM) – это программный интерфейс (API) для HTML и XML документов. DOM предоставляет структурированное представление документа и определяет то, как эта структура может быть доступна из программ, которые могут изменять содержимое, стиль и структуру документа. Представление DOM состоит из структурированной группы узлов и объектов, которые имеют свойства и методы. По существу, DOM соединяет веб-страницу с языками описания сценариев либо языками программирования.
Веб-страница – это документ. Документ может быть представлен как в окне браузера, так и в самом HTML-коде. В любом случае, это один и тот же документ. DOM предоставляет другой способ представления, хранения и управления этого документа. DOM полностью поддерживает объектно-ориентированнное представление веб-страницы, делая возможным её изменение при помощи языка описания сценариев наподобие JavaScript.
Стандарты W3C DOM и WHATWG DOM формируют основы DOM, реализованные в большинстве современных браузеров. Многие браузеры предлагают расширения за пределами данного стандарта, поэтому необходимо проверять работоспособность тех или иных возможностей DOM для каждого конкретного браузера.
Например: стандарт DOM описывает, что метод getElementsByTagName в коде, указанном ниже, должен возращать список всех элементов <p> в документе.

paragraphs = document.getElementsByTagName("P");
// paragraphs[0] это первый <p> элемент
// paragraphs[1] это второй <p> элемент и т.д.
alert(paragraphs[0].nodeName);

Все свойства, методы и события, доступные для управления и создания новых страниц, организованы в виде объектов. Например, объект document, который представляет сам документ, объект table, который реализует специальный интерфейс DOM HTMLTableElement, необходимый для доступа к HTML-таблицам, и так далее. Данная документация даёт справку об объектах DOM, реализованных Gecko-подобных браузерах.		'''
				bot.send_message(mid, answer)

			elif 'переменные' in mt:
				answer1 = '''
		Переменные окружения сервера.

	Непосредственно перед запуском сценария сервер передает ему некие переменные окружения с информацией. В определенных переменных содержатся некоторые заголовки, но, как уже говорилось, не все (получить все заголовки нельзя). Переменные окружения в языке PHP можно использовать как самые обыкновенные переменные. Переменные окружения делятся на четыре большие группы:
	•	Формируемые сервером переменные;
	•	Специальные переменные сервера Apache;
	•	Переменные HTTP-полей запроса;
	•	Переменные SSL-соединения (защищенного соединения).

	Рассмотрим первые три группы переменных окружения:

	Формируемые сервером переменные:'''
				image1 = 'https://sun9-20.userapi.com/c857528/v857528642/125d47/Gm_HNhNGXpw.jpg'
				answer2 = 'Специальные переменные сервера Apache:'
				image2 = 'https://sun9-44.userapi.com/c857528/v857528642/125d6f/0QqibBpXKBs.jpg'
				answer3 = 'Переменные HTTP-полей запроса:'
				image3 = 'https://sun9-42.userapi.com/c857528/v857528642/125d77/NK8W9jnWh1w.jpg'
				bot.send_message(mid, answer1)
				time.sleep(0.1)
				bot.send_photo(mid, image1)
				time.sleep(0.1)
				bot.send_message(mid, answer2)
				time.sleep(0.1)
				bot.send_photo(mid, image2)
				time.sleep(0.1)
				bot.send_message(mid, answer3)
				time.sleep(0.1)
				bot.send_photo(mid, image3)

			elif 'защита' in mt:
				answer1 = '''
		Защита информации в компьютерных сетях на основе Web-технологий.

	Защита информации в Интернете
	Проведение финансовых операций с использованием Интернета, заказ товаров и услуг, использование кредитных карточек, доступ к закрытым информационным ресурсам, передача телефонных разговоров требуют обеспечения соответствующего уровня безопасности.
	Конфиденциальная информация, которая передается по сети Интернет, проходит через определенное количество маршрутизаторов и серверов, прежде чем достигнет пункта назначения. Обычно маршрутизаторы не отслеживают проходящие сквозь них потоки информации, но возможность того, что информация может быть перехвачена, существует. Более того, информация может быть изменена и передана адресату в измененном виде. К сожалению, сама архитектура сети Интернет всегда оставляет возможность для недобросовестного пользователя осуществить подобные действия.
	Всегда существует проблема выбора между необходимым уровнем защиты и эффективностью работы в сети. В некоторых случаях пользователями или потребителями меры по обеспечению безопасности могут быть расценены как меры по ограничению доступа и эффективности. Однако такие средства, как, например, криптография, позволяют значительно усилить степень защиты, не ограничивая доступ пользователей к данным.
	Принципы защиты информации
	Проблемы, возникающие с безопасностью передачи информации при работе в компьютерных сетях, можно разделить на четыре основных типа:
	•	перехват информации - целостность информации сохраняется, но ее конфиденциальность нарушена;
	•	модификация информации - исходное сообщение изменяется либо полностью подменяется другим и отсылается адресату;
	•	подмена авторства информации;
	•	перехват сообщения с его изъятием.
	Данная проблема может иметь серьезные последствия.
	Например, кто-то может послать письмо от вашего имени (этот вид обмана принято называть спуфингом) или Web-сервер может притворяться электронным магазином, принимать заказы, номера кредитных карт, но не высылать никаких товаров.
	В соответствии с перечисленными проблемами при обсуждении вопросов безопасности под самим термином "безопасность" подразумевается совокупность трех различных характеристик обеспечивающей безопасность системы:
	1. Аутентификация - это процесс распознавания пользователя системы и предоставления ему определенных прав и полномочий. Каждый раз, когда заходит речь о степени или качестве аутентификации, под этим следует понимать степень защищенности системы от посягательств сторонних лиц на эти полномочия.
	2. Целостность - состояние данных, при котором они сохраняют свое информационное содержание и однозначность интерпретации в условиях различных воздействий. В частности, в случае передачи данных под целостностью понимается идентичность отправленного и принятого.
	3. Секретность - предотвращение несанкционированного доступа к информации. В случае передачи данных под этим термином обычно понимают предотвращение перехвата информации.
	'''
				answer2 = '''
	Криптография
	Для обеспечения секретности применяется шифрование, или криптография, позволяющая трансформировать данные в зашифрованную форму, из которой извлечь исходную информацию можно только при наличии ключа.
	В основе шифрования лежат два основных понятия: алгоритм и ключ. Алгоритм - это способ закодировать исходный текст, в результате чего получается зашифрованное послание. Зашифрованное послание может быть интерпретировано только с помощью ключа.
	Очевидно, чтобы зашифровать послание, достаточно алгоритма. Однако использование ключа при шифровании предоставляет два существенных преимущества. Во-первых, можно использовать один алгоритм с разными ключами для отправки посланий разным адресатам. Во-вторых, если секретность ключа будет нарушена, его можно легко заменить, не меняя при этом алгоритм шифрования. Таким образом, безопасность систем шифрования зависит от секретности используемого ключа, а не от секретности алгоритма шифрования. Многие алгоритмы шифрования являются общедоступными.
	Количество возможных ключей для данного алгоритма зависит от числа бит в ключе. Например,
	8-битный ключ допускает 256 (28) комбинаций ключей. Чем больше возможных комбинаций ключей, тем труднее подобрать ключ, тем надежнее зашифровано послание. Так, например, если использовать 128-битный ключ, то необходимо будет перебрать 2128 ~= 1040 ключей, что в настоящее время не под силу даже самым мощным компьютерам. Важно отметить, что возрастающая производительность техники приводит к уменьшению времени, требующегося для вскрытия ключей, и системам обеспечения безопасности приходится использовать все более длинные ключи, что, в свою очередь, ведет к увеличению затрат на шифрование.
	Поскольку столь важное место в системах шифрования уделяется секретности ключа, то основной проблемой подобных систем является генерация и передача ключа. Существуют две основные схемы шифрования: симметричное шифрование (его также иногда называют традиционным или шифрованием с секретным ключом) и шифрование с открытым ключом (иногда этот тип шифрования называют асимметричным).
	При симметричном шифровании отправитель и получатель владеют одним и тем же ключом (секретным), с помощью которого они могут зашифровывать и расшифровывать данные. При симметричном шифровании используются ключи небольшой длины, поэтому можно быстро шифровать большие объемы данных. Симметричное шифрование используется, например, некоторыми банками в сетях банкоматов. Однако симметричное шифрование обладает несколькими недостатками. Во-первых, очень сложно найти безопасный механизм, при помощи которого отправитель и получатель смогут тайно от других выбрать ключ. Возникает проблема безопасного распространения секретных ключей. Во-вторых, для каждого адресата необходимо хранить отдельный секретный ключ. В третьих, в схеме симметричного шифрования невозможно гарантировать личность отправителя, поскольку два пользователя владеют одним ключом.
	'''
				answer3 = '''
	В схеме шифрования с открытым ключом для шифрования послания используются два различных ключа. При помощи одного из них послание зашифровывается, а при помощи второго - расшифровывается. Таким образом, требуемой безопасности можно добиться, сделав первый ключ общедоступным (открытым), а второй ключ хранить только у получателя (закрытый, личный ключ). В таком случае любой пользователь может зашифровать послание при помощи открытого ключа, но расшифровать послание способен только обладатель личного ключа. При этом нет необходимости заботиться о безопасности передачи открытого ключа, а для того чтобы пользователи могли обмениваться секретными сообщениями, достаточно наличия у них открытых ключей друг друга.
	Недостатком асимметричного шифрования является необходимость использования более длинных, чем при симметричном шифровании, ключей для обеспечения эквивалентного уровня безопасности, что сказывается на вычислительных ресурсах, требуемых для организации процесса шифрования.
	Электронная цифровая подпись
	Даже если послание, безопасность которого мы хотим обеспечить, должным образом зашифровано, все равно остается возможность модификации исходного сообщения или подмены этого сообщения другим. Одним из путей решения этой проблемы является передача пользователем получателю краткого представления передаваемого сообщения. Подобное краткое представление называют контрольной суммой, или дайджестом сообщения.
	Контрольные суммы используются при создании резюме фиксированной длины для представления длинных сообщений. Алгоритмы расчета контрольных сумм разработаны так, чтобы они были по возможности уникальны для каждого сообщения. Таким образом, устраняется возможность подмены одного сообщения другим с сохранением того же самого значения контрольной суммы.
	Однако при использовании контрольных сумм возникает проблема передачи их получателю. Одним из возможных путей ее решения является включение контрольной суммы в так называемую электронную подпись.
	При помощи электронной подписи получатель может убедиться в том, что полученное им сообщение послано не сторонним лицом, а имеющим определенные права отправителем. Электронные цифровые подписи создаются шифрованием контрольной суммы и дополнительной информации при помощи личного ключа отправителя. Таким образом, кто угодно может расшифровать подпись, используя открытый ключ, но корректно создать подпись может только владелец личного ключа. Для защиты от перехвата и повторного использования подпись включает в себя уникальное число - порядковый номер. олее подробно о электронной цифровой подписи (ЭЦП) читайте в разделе курса ОСВМ Аутентификация информации
	'''
				answer4 = '''
	С 2012 года в Казахстане функционирует свой Национальный удостоверяющий центр, в котором граждане и организации Казахстана могут получить свои закрытые ключи и программные пакеты для формирования своей цифровой подписи для ведения электронных юридических операций с ее использованием. Необходимо, однако, заметить, что данная система еще очень сырая и позволяет злоумышленникам легко воспользоваться чужой электронной подписью для совершения подложных сделок. Это происходит по следующим причинам: выдача файлов электронных подписей совершается "вручную", то есть оператор, выдающий подпись всегда может иметь ее копию на своем USB-носителе, пароль выдается на всех один (!!!) - 123456. При попытке смены пароля файл электронной подписи записанный на стираемом носителе, фатально повреждается, и, если владелец подписи не сделал предварительно копию, то он лишается возможности подписывать документы до получения новой подписи из НУЦ, ЦОН или у программистов районного налогового комитета.
	На сегодня уже известно множество фиктивных сделок с недвижимостью и иным имуществом, а также незаконным получением документов с помощью чужой электронной подписи. Поэтому, единственно разумным действием, предохраняющим человека от лишения его собственности, является безусловный отказ от получения ЭЦП, а если таковая уже получена, то подача заявления о ее утере (отказе от оной).
	Аутентификация
	Аутентификация является одним из самых важных компонентов организации защиты информации в сети. Прежде чем пользователю будет предоставлено право получить тот или иной ресурс, необходимо убедиться, что он действительно тот, за кого себя выдает.
	При получении запроса на использование ресурса от имени какого-либо пользователя сервер, предоставляющий данный ресурс, передает управление серверу аутентификации. После получения положительного ответа сервера аутентификации пользователю предоставляется запрашиваемый ресурс.
	При аутентификации используется, как правило, принцип, получивший название "что он знает", - пользователь знает некоторое секретное слово, которое он посылает серверу аутентификации в ответ на его запрос. Одной из схем аутентификации является использование стандартных паролей. Эта схема является наиболее уязвимой с точки зрения безопасности - пароль может быть перехвачен и использован другим лицом. Чаще всего используются схемы с применением одноразовых паролей. Даже будучи перехваченным, этот пароль будет бесполезен при следующей регистрации, а получить следующий пароль из предыдущего является крайне трудной задачей. Для генерации одноразовых паролей используются как программные, так и аппаратные генераторы, представляющие собой устройства, вставляемые в слот компьютера. Знание секретного слова необходимо пользователю для приведения этого устройства в действие. Одной из наиболее простых систем, не требующих дополнительных затрат на оборудование, но в то же время обеспечивающих хороший уровень защиты, является S/Key, на примере которой можно продемонстрировать порядок представления одноразовых паролей.
	'''
				answer5 = '''
	В процессе аутентификации с использованием S/Key участвуют две стороны - клиент и сервер. При регистрации в системе, использующей схему аутентификации S/Key, сервер присылает на клиентскую машину приглашение, содержащее зерно, передаваемое по сети в открытом виде, текущее значение счетчика итераций и запрос на ввод одноразового пароля, который должен соответствовать текущему значению счетчика итерации. Получив ответ, сервер проверяет его и передает управление серверу требуемого пользователем сервиса. Подробнее о технологии аутентификации
	Защита сетей
	В последнее время корпоративные сети все чаще включаются в Интернет или даже используют его в качестве своей основы. Учитывая то, какой урон может принести незаконное вторжение в корпоративную сеть, необходимо выработать методы защиты. Для защиты корпоративных информационных сетей используются брандмауэры. Брандмауэр - это система или комбинация систем, позволяющие разделить сеть на две или более частей и реализовать набор правил, определяющих условия прохождения пакетов из одной части в другую. Как правило, эта граница проводится между локальной сетью предприятия и Интернетом, хотя ее можно провести и внутри. Однако защищать отдельные компьютеры невыгодно, поэтому обычно защищают всю сеть.
	Брандмауэр пропускает через себя весь трафик и для каждого проходящего пакета принимает решение - пропускать его или отбросить. Для того чтобы брандмауэр мог принимать эти решения, для него определяется набор правил.
	Брандмауэр может быть реализован как аппаратными средствами (то есть как отдельное физическое устройство), так и в виде специальной программы, запущенной на компьютере.
	Как правило, в операционную систему, под управлением которой работает брандмауэр, вносятся изменения, цель которых - повышение защиты самого брандмауэра. Эти изменения затрагивают как ядро ОС, так и соответствующие файлы конфигурации. На самом брандмауэре не разрешается иметь разделов пользователей, а следовательно, и потенциальных дыр - только раздел администратора. Некоторые брандмауэры работают только в однопользовательском режиме, а многие имеют систему проверки целостности программных кодов.
	Брандмауэр обычно состоит из нескольких различных компонентов, включая фильтры или экраны, которые блокируют передачу части трафика. Все брандмауэры можно разделить на два типа:
	пакетные фильтры, которые осуществляют фильтрацию IP-пакетов средствами фильтрующих маршрутизаторов;
	серверы прикладного уровня, которые блокируют доступ к определенным сервисам в сети. Таким образом, брандмауэр можно определить как набор компонентов или систему, которая располагается между двумя сетями и обладает следующими свойствами:
	- весь трафик из внутренней сети во внешнюю и из внешней сети во внутреннюю должен пройти через эту систему;
	- только трафик, определенный локальной стратегией защиты, может пройти через эту систему;
	В таком случае система надежно защищена от проникновения.
	Кардинальным решением защиты локальной сети является ее полная (физическая) изоляция от иных сетей.
		'''
				bot.send_message(mid, answer1)
				bot.send_message(mid, answer2)
				bot.send_message(mid, answer3)
				bot.send_message(mid, answer4)
				bot.send_message(mid, answer5)

			elif 'сферы' in mt:
				answer = '''
		Сферы применения и перспективы развития Web-технологий.


		'''
				bot.send_message(mid, answer)

			elif 'облачные' in mt:
				answer = '''
		Облачные технологии.


		'''
				bot.send_message(mid, answer)
					
			elif 'интерактивные' in mt:
				answer = '''
		Интерактивные компоненты на HTML - странице.


		'''
				bot.send_message(mid, answer)

			elif 'служебные' in mt:
				answer = '''
		Служебные утилиты для работы в Интернет.


		'''
				bot.send_message(mid, answer)

			elif 'чат' in mt:
				answer = '''
		Чат, службы мгновенной почты, сети IRC.


		'''
				bot.send_message(mid, answer)

			elif 'ip' in mt:
				answer = '''
		IP – телефония, видео конференции, мобильный Интернет на основе WAP-протокола.


		'''
				bot.send_message(mid, answer)

			elif 'динамический' in mt:
				answer = '''
		Динамический HTML.


		'''
				bot.send_message(mid, answer)
					
			elif 'встраивание' in mt:
				answer = '''
		Встраивание таблицы стилей в документ. Понятие о селекторах.


		'''
				bot.send_message(mid, answer)

			elif 'определение' in mt:
				answer = '''
		Определение стиля в пределах отдельных тегов.


		'''
				bot.send_message(mid, answer)

			elif 'внешняя' in mt:
				answer = '''
		Внешняя таблица стилей и привязка таблицы стилей к web-странице.


		'''
				bot.send_message(mid, answer)

			elif 'обзор' in mt:
				keyboard = types.InlineKeyboardMarkup()
				callback_button1 = types.InlineKeyboardButton(text="Обзор основных свойств CSS. Свойства шрифта и текста.", callback_data="shrift_i_text")
				callback_button2 = types.InlineKeyboardButton(text="Обзор основных свойств CSS. Задание фона и фонового рисунка в CSS.", callback_data="zadanie")
				callback_button3 = types.InlineKeyboardButton(text="Обзор основных свойств CSS. Свойства CSS для списков", callback_data="svoistva")
				keyboard.add(callback_button1)
				keyboard.add(callback_button2)
				keyboard.add(callback_button3)
				bot.send_message(mid, "Выбери", reply_markup=keyboard)

			elif 'спецификация' in mt:
				answer = '''
		Спецификация MIME.

		MIME (/maɪm/, англ. Multipurpose Internet Mail Extensions — многоцелевые расширения интернет-почты) — стандарт, описывающий передачу различных типов данных по электронной почте, а также, в общем случае, спецификация для кодирования информации и форматирования сообщений таким образом, чтобы их можно было пересылать по Интернету.
		MIME определяет механизмы для передачи разного рода информации внутри текстовых данных (в частности, с помощью электронной почты), а именно: текст на языках, для которых используются кодировки, отличные от ASCII, и нетекстовые данные, такие, как картинки, музыка, фильмы и программы. MIME является также фундаментальным компонентом коммуникационных протоколов, таких как HTTP, которым нужно, чтобы данные передавались в контексте сообщений, подобных e-mail, даже если данные реально не являются e-mail.
		Основной формат электронных сообщений определен в RFC 5322, который является обновлённой версией RFC 2822 (который, в свою очередь, является обновлённой версией RFC 822). Эти стандарты определяют похожие форматы для текстовых e-mail-заголовков и содержимого и правил, относящихся к общеиспользуемым полям, таким как To:, Subject:, From: и Date:. MIME определяет набор e-mail-заголовков для определения дополнительных атрибутов сообщения, включая тип контента, и определяет множество кодировок, которые могут быть использованы для представления 8-битных бинарных данных с помощью символов из 7-битного ASCII. MIME также определяет правила для кодирования символов из Extended ASCII (с кодами 128—255) в заголовках e-mail-сообщения, таких как Subject:.
		MIME расширяем для новых типов — его определение включает метод для регистрации новых типов контента и других атрибутов.
		'''
				bot.send_photo(mid, mime)
					
			elif 'серверная' in mt:
				answer = '''
		Серверная и локальная обработка данных. Этапы взаимодействия с активным и пассивным Web-сервером. 

		«Клиент — сервер» (англ. client–server) — вычислительная или сетевая архитектура, в которой задания или сетевая нагрузка распределены между поставщиками услуг, называемыми серверами, и заказчиками услуг, называемыми клиентами. 
		Преимущества
		Отсутствие дублирования кода программы-сервера программами-клиентами.
		Так как все вычисления выполняются на сервере, то требования к компьютерам, на которых установлен клиент, снижаются.
		Все данные хранятся на сервере, который, как правило, защищён гораздо лучше большинства клиентов. На сервере проще организовать контроль полномочий, чтобы разрешать доступ к данным только клиентам с соответствующими правами доступа.
		Распределённая обработка данных - методика выполнения прикладных программ группой систем. При этом пользователь получает возможность работать с сетевыми службами и прикладными процессами, расположенными в нескольких взаимосвязанных абонентских системах.
		Распределенная обработка данных имеет следующие преимущества:
		возможность увеличения числа удаленных взаимодействующих пользователей, выполняющих функции сбора, обработки, хранения и передачи информации;
		снятие пиковых нагрузок с централизованной базы путем распре­деления обработки и хранения локальных баз на разных персональных компьютерах;
		обеспечение доступа пользователей к вычислительным ресурсам ЛВС;
		обеспечение обмена данными между удаленными пользователя­ми.
		Различают пассивное и активное состояние Web-сервера. Так, Web-cepвер находится в пассивном состоянии, если формируемый им документ содержит статическую информацию, то есть на Web-странице отсутствуют среде ввода и обработки запросов к серверу. В активном состоянии Web-сервер находится при динамическом создании Web-документов в ответ на запрос пользователя или в случае, когда в обозреватель загружены различные интерактивные элементы формы.
		Для публикации БД основной интерес представляет активный Web-сервер, реализуемый с помощью модулей расширения Web-сервера.
		Для организации связи программных расширений Web-сервера с БД пользуются также современные интерфейсы доступа к данным OLE DB, ADO и ODBC. Эти интерфейсы являются промежуточным уровнем между источником данных и приложением, в качестве которого выступают программные расширения Web-сервера.
		Для создания модулей расширения Web-сервера могут использоваться интерфейсы CGI, WinCGI или интерфейсы программирования API.
		'''
				bot.send_message(mid, answer)

			elif 'веб' in mt:
				answer = '''
		Веб-сервис. Используемые стандарты.

		Веб-служба, веб-сервис (англ. web service) — идентифицируемая уникальным веб-адресом (URL-адресом) программная система со стандартизированными интерфейсами, а также HTML-документ сайта, отображаемый браузером пользователя.
		Веб-службы могут взаимодействовать друг с другом и со сторонними приложениями посредством сообщений, основанных на определённых протоколах (SOAP, XML-RPC и т. д.) и соглашениях (REST). Веб-служба является единицей модульности при использовании сервис-ориентированной архитектуры приложения.
		В обиходе веб-сервисами называют услуги, оказываемые в Интернете. В этом употреблении термин требует уточнения, идёт ли речь о поиске, веб-почте, хранении документов, файлов, закладок и т. п. Такими веб-сервисами можно пользоваться независимо от компьютера, браузера или места доступа в Интернет.
		Преимущества
			Веб-службы обеспечивают взаимодействие программных систем независимо от платформы. Например, Windows-C#-клиент может обмениваться данными с Java-сервером, работающим под Linux.
			Веб-службы основаны на базе открытых стандартов и протоколов. Благодаря использованию XML достигается простота разработки и отладки веб-служб.
			Использование интернет-протокола обеспечивает HTTP-взаимодействие программных систем через межсетевой экран. Это значительное преимущество, по сравнению с такими технологиями, как CORBA, DCOM или Java RMI. С другой стороны, веб-службы не привязаны намертво к HTTP — могут использоваться и другие протоколы.
		Недостатки
			Меньшая производительность и больший размер сетевого трафика по сравнению с технологиями RMI, CORBA, DCOM за счёт использования текстовых XML-сообщений. Однако на некоторых веб-серверах возможна настройка сжатия сетевого трафика.
			Аспекты безопасности. Ответственные веб-службы должны использовать кодирование, возможно — требовать аутентификации пользователя. Достаточно ли здесь применения HTTPS, или предпочтительны такие решения, как XML Signature, XML Encryption или SAML — должно быть решено разработчиком.
		'''
				bot.send_message(mid, answer)

			elif 'мэшапы' in mt:
				answer = '''
		Мэшапы. Архитектура Мэшап.

		Мэша́п — это веб-приложение, объединяющее данные из нескольких источников в один интегрированный инструмент; например, при объединении картографических данных Google Maps с данными о недвижимости с Craigslist получается новый уникальный веб-сервис, изначально не предлагаемый ни одним из источников данных.
		Содержимое, используемое в мэшапах, обычно получено от третьих лиц через открытый интерфейс или API. Есть мнение, что случаи, когда используются закрытые интерфейсы не могут считаться мэшапами
		Другими методами получения содержимого могут быть веб-фиды (например RSS и Atom) или парсинг HTML-страниц. Многие экспериментируют с мэшапами, используя API сразу с нескольких сайтов — Amazon, eBay, Flickr, проектов Google, Microsoft, Yahoo, YouTube и т. п., что привело к созданию редакторов мэшапов.
		Архитектура веб-мэшапов всегда состоит из трёх частей.
		Провайдер содержимого — это источник данных. Данные доступны через API и различные веб-протоколы, такие как RSS, REST и веб-сервисы.
		Мэшап-сайт — это веб-приложение, предлагающее новый сервис, использующий не принадлежащие ему источники данных.
		Браузер клиента — собственно пользовательский интерфейс мэшапа. В веб-приложениях содержимое может быть «замэшаплено» клиентским браузером с использованием клиентского языка программирования, например JavaScript.
		'''
				bot.send_message(mid, answer)

			

			else:
				answer = name + ', тебе нужно написать только первое слово твоего вопроса. Не забудь правильно его написать.'
				bot.send_message(mid, answer)
				ttt = str(mid) + ' ' + name + ' пишет: ' + mt
				bot.send_message(888833912, ttt)
				print(str(mid) + ' ' + name + ' пишет: ' + mt)

		except:
			print('Что-то пошло не так')

	@bot.callback_query_handler(func=lambda c:True)
	def inlin(c):
		if c.data == 'shrift_i_text':
			zhopa = '''
	Обзор основных свойств CSS. Свойства шрифта и текста.

	'''
			bot.send_message(c.message.chat.id, zhopa)
		elif c.data == 'zadanie':
			zhopa = '''
	Обзор основных свойств CSS. Задание фона и фонового рисунка в CSS.

	Свойства CSS отвечающие за шрифт:
		font-family – Устанавливает шрифт;
		font-size – Устанавливает размер шрифта;
		font-stretch – Устанавливает начертание шрифта( узкое,нормальное,или широкое);
		font-style – Определяет начертание шрифта( обычное, курсив, наклонное);
		font-variant – Определяет как нужно представлять строчные буквы;
		font-weight – Устанавливает насыщенность( жирность) шрифта;

	Свойства CSS отвечающие за размер элементов:
		width — устанавливает ширину для блочных элементов (допустимые значения – значение в пикселях|проценты|auto|inherit);
		height— устанавливает высоту для блочных элементов(допустимые значения – значение в пикселях|проценты|auto|inherit);
		max-width – свойство устанавливает максимальную ширину элемента(значение | проценты | none | inherit);
		max-height – свойство устанавливает максимальную высоту элемента(значение | проценты | none | inherit);
		min-width – Задает минимальную ширину элемента(значение | проценты | inherit).
		min-height – Задает минимальную высоту элемента(значение | проценты | inherit).

	Свойства CSS отвечающие за текст.
		text-align – отвечает за горизонтальное выравнивание текста;
		vertical-align –свойство отвечающее за вертикальное выравнивание;
		color – цвет текста;
		line-height – задает высоту строки(множитель | значение | проценты | normal | inherit);
		text-transform – преобразовывает текст либо в заглавные либо в строчные символы;
		background – позволяет установить либо цвет либо фоновую картинку на сайт.
		background-color – позволяет установить фоновый цвет элемента;
		background-image – задает путь до файла с фоновым изображением;
		margin – свойство позволяющее задать отступы сразу с 4 сторон;
		padding – позволяет установить значение полей вокруг содержимого элемента.'''
			bot.send_message(c.message.chat.id, zhopa)
		elif c.data == 'svoistva':
			zhopa = '''
	Обзор основных свойств CSS. Свойства CSS для списков

	Свойства CSS отвечающие за шрифт.
		font-family – Устанавливает шрифт;
		font-size – Устанавливает размер шрифта;
		font-stretch – Устанавливает начертание шрифта( узкое,нормальное,или широкое);
		font-style – Определяет начертание шрифта( обычное, курсив, наклонное);
		font-variant – Определяет как нужно представлять строчные буквы;
		font-weight – Устанавливает насыщенность( жирность) шрифта;

	Свойства CSS отвечающие за размер элементов.
		width — устанавливает ширину для блочных элементов (допустимые значения – значение в пикселях|проценты|auto|inherit);
		height— устанавливает высоту для блочных элементов(допустимые значения – значение в пикселях|проценты|auto|inherit);
		max-width – свойство устанавливает максимальную ширину элемента(значение | проценты | none | inherit);
		max-height – свойство устанавливает максимальную высоту элемента(значение | проценты | none | inherit);
		min-width – Задает минимальную ширину элемента(значение | проценты | inherit).
		min-height – Задает минимальную высоту элемента(значение | проценты | inherit).

	Свойства CSS отвечающие за текст.
		text-align – отвечает за горизонтальное выравнивание текста;
		vertical-align –свойство отвечающее за вертикальное выравнивание;
		color – цвет текста;
		line-height – задает высоту строки(множитель | значение | проценты | normal | inherit);
		text-transform – преобразовывает текст либо в заглавные либо в строчные символы;
		background – позволяет установить либо цвет либо фоновую картинку на сайт.
		background-color – позволяет установить фоновый цвет элемента;
		background-image – задает путь до файла с фоновым изображением;
		margin – свойство позволяющее задать отступы сразу с 4 сторон;

	CSS-списки — набор свойств, отвечающих за оформление списков. Использование HTML-списков очень распространено при создании панелей навигации по сайту. Элементы списка представляют набор блочных элементов.
	Тип маркера списка list-style-type
	Свойство изменяет типа маркера или удаляет маркер для маркированного и нумерованного списков. Наследуется.
	Изображения для элементов списка list-style-image
	В качестве маркера элементов списка можно использовать изображения и градиентые заливки. Наследуется.
	Местоположение маркера списка list-style-position
	Данное свойство предоставляет возможность располагать маркер вне или внутри содержимого элемента списка. Наследуется.'''
			bot.send_message(c.message.chat.id, zhopa)
		elif c.data == 'getpost':
			zhopa = '''
	Методы запроса клиента. GET, POST.

GET
Используется для запроса содержимого указанного ресурса. С помощью метода GET можно также начать какой-либо процесс. В этом случае в тело ответного сообщения следует включить информацию о ходе выполнения процесса.
Клиент может передавать параметры выполнения запроса в URI целевого ресурса после символа «?»:
GET /path/resource?param1=value1&param2=value2 HTTP/1.1
Согласно стандарту HTTP, запросы типа GET считаются идемпотентными
Кроме обычного метода GET, различают ещё
•	Условный GET — содержит заголовки If-Modified-Since, If-Match, If-Range и подобные;
•	Частичный GET — содержит в запросе Range.
Порядок выполнения подобных запросов определён стандартами отдельно.

POST
Применяется для передачи пользовательских данных заданному ресурсу. Например, в блогах посетители обычно могут вводить свои комментарии к записям в HTML-форму, после чего они передаются серверу методом POST и он помещает их на страницу. При этом передаваемые данные (в примере с блогами — текст комментария) включаются в тело запроса. Аналогично с помощью метода POST обычно загружаются файлы на сервер.
В отличие от метода GET, метод POST не считается идемпотентным, то есть многократное повторение одних и тех же запросов POST может возвращать разные результаты (например, после каждой отправки комментария будет появляться очередная копия этого комментария).
При результате выполнения 200 (Ok) в тело ответа следует включить сообщение об итоге выполнения запроса. Если был создан ресурс, то серверу следует вернуть ответ 201 (Created) с указанием URI нового ресурса в заголовке Location.
Сообщение ответа сервера на выполнение метода POST не кэшируется.'''
			bot.send_message(c.message.chat.id, zhopa)
		elif c.data == 'cookie':
			zhopa1 = '''
	Методы аутентификации в интернет. COOKIE. Установка cookie с помощью HTML.

	Аутентификация — проверка подлинности предъявленного пользователем идентификатора. Аутентификация требуется при доступе к таким интернет-сервисам как:
		электронная почта
		веб-форум
		социальные сети
		интернет-банкинг
		платежные системы
		корпоративные сайты
		интернет-магазины.'''
			bot.send_message(c.message.chat.id, zhopa1)
			image1 = 'https://sun9-18.userapi.com/c200720/v200720969/cf83/tXLA4irmQDM.jpg'
			bot.send_photo(c.message.chat.id, image1)
			zhopa2 = '''
	Cookie является решением одной из наследственных проблем HTTP спецификации. Эта проблема заключается в непостоянстве соединения между клиентом и сервером, как при FTP или Telnet сессии, т.е. для каждого документа (или файла) при передаче по HTTP протоколу посылается отдельный запрос. Включение cookie в HTTP протокол дало частичное решение этой проблемы.
	Cookie это небольшая порция информации, которую сервер передает клиенту. Клиент (броузер) будет хранить эту информацию и передавать ее серверу с каждым запросом как часть HTTP заголовка. Некоторые cookie хранятся только в течение одной сессии, они удаляются после закрытия броузера. Другие, установленные на некоторый период времени, записываются в файл. Обычно этот файл называется 'cookie.txt'.
	Простейший способ выставить cookie - использовать соответствующий META-таг в заголовке <HEAD> </HEAD> любого статического HTML документа. Это выглядит следующим образом:
	 	<META HTTP-EQUIV="Set-Cookie" CONTENT="NAME=value; EXPIRES=date;
		DOMAIN=domain_name; PATH=path; SECURE">
	'''
			bot.send_message(c.message.chat.id, zhopa2)
		elif c.data == 'tech_javascript':
			zhopa = '''
	Технология создания приложений, исполняющихся на стороне клиента.(JavaScript).


	'''
			bot.send_message(c.message.chat.id, zhopa)
		elif c.data == 'tech_perl':
			zhopa = '''
	Технология создания приложений, исполняющихся на стороне сервера. (CGI-PERL, PHP).


	'''
			bot.send_message(c.message.chat.id, zhopa)
		elif c.data == 'tech_cgi':
			zhopa1 = '''
	Технология CGI, заголовки ответов и запросов по CGI.

	Технология CGI (Common Gateway Interface) подразумевает использование в составе ресурса Интернета интерактивных элементов на базе приложений, обеспечивающих передачу потока данных от объекта к объекту. Именно так организовано во Всемирной сети большинство чатов, конференций (форумов), досок объявлений, гостевых книг, поисковых машин и рейтинговых систем. Упрощенно принцип работы CGI выглядит следующим образом: например, пользователь заполняет на web-страничке ту или иную форму и нажимает на кнопку, после чего информация из формы передается в CGI-скрипт, который запускается на выполнение и обрабатывает полученную информацию. Результат работы CGI-скрипта может быть выдан (встроен) в другую html-страницу, отправлен по почте или трансформирован каким-либо другим способом. Как правило, скрипты CGI размещаются на сервере в специально отведенной для этой цели директории, которой назначается имя CGI-BIN. Следует помнить, что подключение, отладка и запуск таких программ требует соответствующих прав доступа к web-серверу, а также определенных знаний и навыков.
	Технология CGI обычно реализуется двумя методами: либо с использованием программ, написанных на языке PERL (Practical Extraction and Report Language), - как правило, такие файлы имеют расширение .pl, либо с помощью приложений, созданных обычно с применением языка С и откомпилированных непосредственно на сервере, поскольку большинство UNIX-совместимых платформ включают в себя встроенный транслятор этого языка. Подобные программы имеют расширение .cgi. Необходимо отметить, что PERL, как и HTML, является интерпретируемым языком, но он интерпретируется не браузером пользователя, а сервером перед передачей данных пользователю. Для того чтобы запустить подобный скрипт на исполнение, на web-сервере не требуется дополнительной компиляции, необходимо лишь установленного на сервере интепритатора соответствующего языка.
	Помимо упомянутых возможностей с помощью данной технологии можно организовать систему показа последовательности рекламных баннеров или автозагрузки файлов на сервер, создать форму отправки электронного письма непосредственно со страницы сайта (без использования почтовой программы) или службу виртуальных открыток. Среди достоинств CGI следует отметить их независимость от клиентского программного обеспечения - эту технологию сможет применять каждый пользователь, просматривающий содержимое сервера при помощи браузера практически любой версии. Главный недостаток заключается в том, что для установки и настройки приложений CGI на сервере нужно обладать как минимум правами администратора, поскольку эти программы при запуске способны нарушить нормальное функционирование серверного компьютера и дестабилизировать работу сети, именно поэтому не все службы хостинга предоставляют возможность использовать CGI-скрипты.
	Технология Common Gateway Interface
	Технология Common Gateway Interface (CGI), отличается от остальных рассматриваемых технологий тем, что является наиболее низкоуровневой и является стандартом интерфейса, который служит для связи внешней программы с web-сервером.
	Сам протокол разработан таким образом, чтобы можно было использовать любой язык программирования, который может работать со стандартными устройствами ввода/вывода. Поскольку такая возможность имеется на уровне операционной системы, то, если не требуется сложный скрипт, его можно оформить в виде командного файла.
	Рассмотрим основные достоинства и недостатки технологии CGI по выделенным критериям:'''
			zhopa2 = '''
	• CGI не налагает особых условий на платформу и web - сервер, поэтому работает на всех популярных платформах и web - серверах. Также технология не привязана к конкретному языку программирования и может быть использована на любом языке, работающем со стандартными потоками ввода/вывода.
		•	Производительность CGI - программ не высока. Основной причиной этого
	является то, что при очередном обращении к серверу для работы CGI - программы
	создается отдельный процесс, что требует большого количества системных
	ресурсов.
		•	Встроенных средств масштабируемости технология не предусматривает, об этом
	разработчикам приходится заботиться отдельно.
		•	CGI - программа представляет из себя готовый к исполнению файл, что
	препятствует легкому расширению системы.
	Эти причины привели к тому, что сейчас разработке CGI - приложений предпочитают более развитые платформы, предоставляющие больше удобства разработчикам, обладающие повышенной производительностью. Однако большая масса уже разработанных приложений заставляет считаться с технологией CGI, а ее знание необходимо для понимания работы высокоуровневых платформ.
	CGI (от англ. Common Gateway Interface — «общий интерфейс шлюза») — стандарт интерфейса, используемого для связи внешней программы с веб-сервером. Программу, которая работает по такому интерфейсу совместно с веб-сервером, принято называть шлюзом, хотя многие предпочитают названия «скрипт» (сценарий) или «CGI-программа».
	Сам интерфейс разработан таким образом, чтобы можно было использовать любой язык программирования, который может работать со стандартными устройствами ввода/вывода. Такими возможностями обладают даже скрипты для встроенных командных интерпретаторов операционных систем, поэтому в простых случаях могут использоваться даже командные скрипты.

	Переменные заголовка HTTP-запроса

	За исключением тех строк из заголовка HTTP-запроса, которые уже названы, сервер приделывает строкам префикс HTTP_ и заменяет знаки '-' на '_':
	HTTP_ACCEPT - Давая запрос на сервер браузер обычно расчитывает получить информацию определеного формата,и для этого он в заголовке запроса указывает поле Accept:,Отсюда скрипту поступает cписок тех MIME,которые браузер готов принять в качестве ответа от сервера.
	Пример:HTTP_ACCEPT=text/html,text/plain,image/gif
	HTTP_USER_AGENT - Браузер обычно посылает на сервер и информацию о себе,чтоб базируясь на знании особеностей и недостатков конкретных браузеров CGI-скрипт мог выдать информацию с учетом этого. Например,разные браузеры могут поддерживать или не поддерживать какие-то HTML тэги.
	Пример:HTTP_USER_AGENT=Mozila/2.01 Gold(Win95;I)
	И другие всего их около 30.
	CGI-скрипт получает доступ к значениям этих переменых через функции операционной системы (в разных операционных системах это реализуется по разному), тем самым CGI-скрипт получает исчерпывающую информацию об HTTP-запросе. А тело запроса (если оно конечно есть) поступает на STDIN (стандартный поток ввода) скрипта. Размером CONTENT_LENGTH байт.

	Заголовок ответа CGI программы

	Теперь обсудим каким образом CGI-скрипт должен посылать информацию Web-серверу с точки зрения CGI.
	Если CGI-скрипт хочет послать что-то в ответ, то он должен сделать это следующим образом. Все выводимые данные должны помещаться в STDOUT скрипта. При этом должен обязательно присутствовать CGI-заголовок (CGI-Header). В CGI-заголовоке могут быть следующие поля:
	Content-Type: – должно обязательно присутствовать, если есть тело ответа. Определяет MIME-тип ответа.
	Например: Content-Type:text/html'''
			zhopa3 = '''
	Location: - Должно содержать URL – ресурса на который перенаправляется запрос, как правило в этом случае больше ничего не указывается (т.к запрос перенаправляется на другой сервер)
	Например: Location:http://www.idsoftware.com/index.html
	Status: - Содержит код завершения работы CGI-скрипта. Если не указан то подразумевается 200 Ok
	Например: Status:404 Not found
	Далее после CGI заголовка на STDOUT посылается пустая строка, которая отделяет заголовок от тела ответа. И после ее посылается собственно тело ответа тип которого был указан в Content-Type (рисунок, текст HTML или другое).
	Web-сервер получив через STDOUT информацию поступившую от CGI-скрипта формирует на базе ее HTTP-ответ который и посылается клиенту (броузеру).

	NPH - скрипты

	Следует сказать что CGI-скрипт может сам без участия Web-сервера сформировать полностью HTTP-ответ. Такие CGI-скрипты называются - Non-Parsed-Headers , и как отличие их имена должны начинаться с приставки – “nph-” или для Windows – ориентированных Web-серверов первая помещаемая в STDOUT строка должна быть такая “HTTP/1.0” , т.е. версия протокола HTTP, тогда сервер будет считать что данный CGI-скрипт будет nph CGI – скриптом.
	Например: nph-animate.cgi

	Передача параметров CGI-скрипту

	CGI-скрипту можно передавать параметры. Синтаксис этого такой: <URL-скрипта>?Param1&Param2=value&Param+2b%20%5B%5C%5D%5E , где ? – означает что дальнейшие данные рассматриваются как параметры; & - этим символом параметры отделяются друг от друга; % - после этого символа идет 16-й код символа, это необходимо потому-что не все символы можно использовать в командной строке, а с помощью % можно задать абсолютно любой символ; + - определяет пробел (пробелы нельзя использовать в явном виде в командной строке); параметры могуг разбиваться на две части на имя и значение с помощью знак равенства (для удобства). Параметры в зависимости от метода HTTP-запроса передаются CGI-скрипту (при GET присоединяются к командной строке, а при POST поступают как тело запроса на STDIN скрипта). Использование параметров более подробно будет описано, когда речь пойдет об HTML – формах.
	Пример CGI-скрипта (я написал пример на языке Pascal т.к. думаю, что c языком Pascal знакомы почти все ) .
	Program TestCGI;
	{WriteLn –стандартная функция для записи в STDOUT в языке Pascal}
	Begin
	WriteLn(‘Content-Type:text/html’);{CGI– заголовок указан тип MIME передавемых данных }
	WriteLn;{ Пустая строка отделяющая заголовок от тела ответа }
	WriteLn(‘<HTML>’);{Тело ответа}
	WriteLn(‘<H1>Hello World</H1>’);
	WriteLn(‘</HTML>’);
	End.
	Откомпилируйте данную программу (с помощью компилятора для той операционной системе в которой она будет работать). Поместите ее в директорию /cgi-bin вашего сервера. И попробуйте запустить (из броузера указав ее URL ). Она выведет вам приветствие Hello World.

	Применения CGI скриптов

	А сейчас рассмотрим некоторые применения CGI-скриптов.
	Прежде всего CGI используется при обработке HTML – форм. Также для создания счетчиков посещений, гостевых книг и чатовых систем.'''
			zhopa4 = '''
	Счетчики

	Одним из самых популярных CGI-приложений являются счетчики. Устройство работы его простое CGI-приложение запускается вместе со страничкой. А при запуске считывает старое число посещений из файла на сервере (например counter.dat) инкременирует и записывает его обратно в этот файл вместо старого числа и при желании отображает его на странице. Но при таком методе не будут отфильтровываться лишние нажатия на ReLoad чтобы их убрать можно в этом файле указывать еще IP-адрес с которого запускается данный скрипт и текущее время. А после считывать IP-адрес и если он такой же а время изменилось не болле чем на 30 секунд с последнего посещения то не записывать ничего нового в этот файл (так например поступает счетчик в Ramblere).
	'''
			
			bot.send_message(c.message.chat.id, zhopa1)
			bot.send_message(c.message.chat.id, zhopa2)
			bot.send_message(c.message.chat.id, zhopa3)
			bot.send_message(c.message.chat.id, zhopa4)
		elif c.data == 'naznach_php':
			zhopa = '''
	Назначение языка PHP. Преимущества и недостатки языка PHP. Типы данных в РНР. Операции и выражения в РНР. Строки в РНР.


	'''
			bot.send_message(c.message.chat.id, zhopa)
		elif c.data == 'naznach_ftp':
			zhopa = '''
	Назначение FTP протокола, формат адреса FTP-ресурса, FTP-сервер и клиент.


	'''
			bot.send_message(c.message.chat.id, zhopa)
		elif c.data == 'naznach_telnet':
			zhopa = '''
	Назначение протоколов Telnet и NNTP.

TELNET (сокр. от англ. teletype network) — сетевой протокол для реализации текстового терминального интерфейса по сети (в современной форме — при помощи транспорта TCP). Название «telnet» имеют также некоторые утилиты, реализующие клиентскую часть протокола. Современный стандарт протокола описан в RFC 854.
Выполняет функции протокола прикладного уровня модели OSI.
Назначение протокола TELNET в предоставлении достаточно общего, двунаправленного, восьмибитного байт-ориентированного средства связи. Его основная задача заключается в том, чтобы позволить терминальным устройствам и терминальным процессам взаимодействовать друг с другом. Предполагается, что этот протокол может быть использован для связи вида терминал-терминал («связывание») или для связи процесс-процесс («распределенные вычисления»).
NNTP (англ. Network News Transfer Protocol) — представляет собой сетевой протокол распространения, запрашивания, размещения и получения групп новостей при взаимодействии между сервером групп новостей и клиентом
NNTP — протокол, разработанный для обмена сообщениями в телеконференциях. По строению этот протокол во многом схож с протоколом приёма и передачи электронной почты SMTP.
Существует вариация протокола NNTP, называемая NNRP (Network News Readers Protocol). Она отличается только набором поддерживаемых команд, и предназначена для чтения конференций с сервера новостей клиентским ПО в режиме онлайн. Функционально NNTP ориентирован на то, что статьи отправляются подписчикам при их появлении на сервере, а NNRP — по запросу клиента. Соответственно, NNTP используется для обмена сообщениями между серверами новостей, а NNRP — для чтения сообщений с ньюссервера и создания новых сообщений.'''
			bot.send_message(c.message.chat.id, zhopa)
		elif c.data == 'ponyatiye_web':
			zhopa = '''
	Понятие о Web-технологиях передачи и обработки информации.


	'''
			bot.send_message(c.message.chat.id, zhopa)
		elif c.data == 'ponyatiye_css':
			zhopa = '''
	Понятие CSS. основные понятия и определения. Синтаксис языка стилей. Правила стилей.


	'''
			bot.send_message(c.message.chat.id, zhopa)
		elif c.data == 'web_integracia':
			zhopa = '''
	Web-интеграция.

	Web-интеграция — объединение разнородных веб-приложений и систем в единую среду на базе веб.
	Иными словами, web-интеграция представляет собой синхронизированное функционирование сайта, склада, бухгалтерии и других специализированных программ. Речь идет о бизнес-взаимодействии корпоративных ресурсов или интернет-магазинов с локальными информационными системами и любыми торгово-учетными решениями, при котором изменения в одном звене общей системы влияют на другие.
	Преимущества web-интеграции с точки зрения бизнеса:
	•	Простой контроль информации, представленной потребителям на различных точках взаимодействия.
	•	Представление наиболее актуальных и точных данных на цифровых точках взаимодействия с ЦА,
	•	Увеличение продаж за счет расширения возможностей отделов продаж и клиентской поддержки.
	•	Значительное снижение расходов на ручную обработку данных и составление отчетов.
	•	Снижение расходов на администрацию информационных систем и веб-сайтов.
	•	Менеджмент и упрощение бизнес-процессов.
	•	Экономия времени и ресурсов.
	'''
			bot.send_message(c.message.chat.id, zhopa)
		elif c.data == 'web_tech':
			zhopa = '''
	Web-технологии в сетях различного уровня.


	'''
			bot.send_message(c.message.chat.id, zhopa)
		elif c.data == 'tech_web':
			zhopa1 = '''
	Технологии создания Web-приложений.

Исследованы преимущественные особенности серверной технологии ASP.NET в сравнении с технологией PHP при создании web-приложений.
В настоящее время существует несколько способов создания сайтов, реализующих принципиально разные подходы и технологии, с применением разных языков и платформ программирования: Active Server Pages (ASP) - технология создания веб-приложений от «Microsoft»; Active Server Pages.Net (ASP.NET) - усовершенствованная версия ASP, являющаяся составной частью платформы Microsoft.NET; Personal Home Page Tools (PHP)-скриптовый язык программирования общего назначения; Practical Extraction and Report Language (Perl) -высокоуровневый интерпретируемый динамический язык программирования общего назначения; Java Server Pages (JSP) и многие другие. И выбор способа создания зависит от множества факторов, начиная от целевой нагрузки сайта и заканчивая квалификацией разработчиков. Наиболее распространенными сейчас являются две технологии ASP.NET и PHP. В данной работе рассмотрены особенности создания сайтов с применением серверной технологии ASP.NET в сравнении с разработкой сайтов на языке PHP.
ASP.NET - это концептуально новая технология Microsoft, созданная в рамках идеологии .NET. Ключевыми сторонами .NET являются масштабируемость, кроссплатформенность, межъязыковое взаимодействие и безопасное программирование. ASP.NET — это комплекс технологий в составе .NET Framework, позволяющих разработчикам создавать интернет-приложения и веб-сервисы XML [1]. В отличие от традиционных веб-страниц, являющихся сочетанием статического HTML и сценариев, ASP.NET использует скомпилированные страницы, управляемые событиями. Это позволяет разработчикам создавать интернет-приложения, отличающиеся богатством и функциональностью, обычно ассоциирующимися с приложениями, созданными на таких языках программирования, как Visual Basic или Visual C++. Однако в отличие от локальных приложений, эти скомпилированные страницы создают информацию, отправляемую на компьютеры или обозреватели клиентов с использованием языков разметки наподобие HTML и XML. Это позволяет разработчикам создавать приложения с широкой функциональностью, защищая при этом интерфейс пользователя к устройствам и системам под управлением разных операционных систем. По мнению автора, бесспорным достоинством, обнаруживающим себя при создании приложений, являются: серверные элементы управления (которые во многих случаях действительно ускоряют разработку форм) [2].
PHP - крайне популярный сценарный язык общего назначения, и это не смотря на то, что создавался специально для веб-разработок [3]. В основе своей имеет синтаксис очень похожий на синтаксис C, Java и Perl, однако проще этих языков. Имеет открытый исходный код.
Чаще всего PHP сценарии встроены в HTML-разметку внутри специальных тегов <?php?>. Во время запроса документа, имеющего PHP сценарии, на сервере происходит выполнение кода, а пользователь получает в браузер «чистый» HTML. Таким образом, PHP сценарии решают все те задачи, которые характерны для типичных CGI-приложений.
Сразу оговоримся, что сравнение ASP.NET и PHP, строго говоря, некорректно, так как это принципиально различные понятия. Между тем, существует большое количество публикаций, посвященных преимуществам и недостаткам ASP.NET и PHP во взаимном сравнении. По мнению автора, имеет смысл говорить о целесообразности использования той или иной методики в прикладном аспекте (применительно к конкретной задаче).'''
			zhopa2 = '''
Актуальные проблемы авиации и космонавтики. Информационные технологии
При создании сайтов http://yoga-kailas.ru, http://eleonoranabeeva.ru была использована технология PHP. Такой выбор был сделан не случайно. Эта технология позиционирована как простое в освоении и доступное бесплатное средство создания небольших пользовательских приложений, которое поддерживает при этом множество надстроек. В процессе проектирования этих сайтов был выявлен ряд серьезных трудностей применения PHP с точки зрения разработчика. Самым главным недостатком является то, что процесс выявления и исправления ошибок занимал большую часть проектирования ввиду того, что отладка в PHP не реализована принципиально.
Применение ASP.NET лишено этого главного неудобства (сайт просто не сможет функционировать, пока не будут исправлены все ошибки, которые к тому же еще и легко выявить с точностью до строки кода). Поэтому готовый сайт, разработанный в среде ASP.NET априори будет безупречен с точки зрения программного кода.
Главный недостаток ASP.NET, который тормозит распространение этой, безусловно, передовой технологии - трудность в самостоятельном изучении и большой объем информации, необходимой разработчику при проектировании сайтов. Связано это с тем, что ASP.NET разрабатывалась как технология создания крупных проектов с максимальной степенью специализации (отсюда и поддержка в ASP.NET большого числа языков и способов программирования, в том числе и объектно-ориентированного). Тем не менее, принципы, заложенные в ASP.NET, при соответствующей степени квалификации разработчиков, позволяют разрабатывать даже небольшие проекты с существенной экономией времени. Поэтому при разработке коммерческих проектов и проектов с жесткими временными рамками уже сейчас ASP.NET выглядит «более современной» технологией. К тому же существующие в настоящее время тенденции (соотношение количества сайтов разработанных по технологиям ASP.NET и PHP составляет 2:3, хотя еще два-три года назад это соотношение оценивалось как 1:9) позволяют с уверенностью утверждать, что ASP.NET в скором времени станет основной технологией разработки web-приложений.
Необходимо учитывать, что большое количество пользовательских приложений проектируется не в качестве коммерческих продуктов больших организаций, а в домашних условиях «своими силами». И привлекать к разработке таких приложений дорогостоящие многоуровневые серверные технологии нецелесообразно. Поэтому технология PHP еще долгое время будет актуальной и востребованной.
Однако не стоит забывать о том, что и с помощью технологии ASP.NET и с использованием PHP можно разработать как хорошее, так и плохое приложение, поэтому определяющей при разработке сайтов всегда будет все же квалификация разработчика, а не применяемая технология.'''
			bot.send_message(c.message.chat.id, zhopa1)
			bot.send_message(c.message.chat.id, zhopa2)
		elif c.data == 'tech_exe':
			zhopa1 = '''
	Технологии исполняющиеся на стороне клиента и сервера. Механизм работы Web-сервера.

Веб-сервер — сервер, принимающий HTTP-запросы от клиентов, обычно веб-браузеров, и выдающий им HTTP-ответы, как правило, вместе с HTML-страницей, изображением, файлом, медиа-потоком или другими данными.
Понятие "Веб-сервер" может относится как к к самому серверу, как физическому хранилищу, так и к программному обеспечению.
С точки зрения железа, веб-сервер — это компьютер который хранит ресурсы сайта (HTML документы, CSS стили, JavaScript файлы и другое) и доставляет их на устройство конечного пользователя (веб-браузер и т.д.). Обычно подключен к сети Интернет и может быть доступен через доменное имя, например mozilla.org.
С точки зрения ПО, веб-сервер включает в себя некоторые вещи, которые контролируют доступ пользователей к размещенным на сервере файлам, это минимум HTTP сервера. HTTP сервер это часть ПО которая расшифровывает URL (веб-адрес) и HTTP (протокол который использует браузер для просмотра веб-станиц). Простыми словами, когда браузеру нужен файл размещенный на веб-сервере, браузер запрашивает его через HTTP. Когда запрос достигает нужного веб-сервера (железо), сервер HTTP (ПО) передает запрашиваемый документ обратно, также через HTTP.
Чтобы опубликовать веб-сайт, нужно либо статический, либо динамический веб-сервер.
Статический веб-сервер, или стек, состоит из компьютера (железо) с сервером HTTP (ПО). На слэнге это называется “статикой”, потому что сервер посылает размещенные на нем файлы в браузер “как есть”.
Динамический веб-сервер состоит из статического веб-сервера плюс дополнительного программного обеспечения, наиболее часто сервером приложений и базы данных. Мы называем его “динамический”, потому что сервер приложений изменяет исходные файлы перед отправкой в браузер по HTTP.
Например, для получения итоговой страницы, которую вы видите в браузере, сервер приложений может заполнить HTML шаблон данными из базы данных. Такие сайты, как MDN (Mozilla Developer Network) или Википедия состоят из тысяч веб-страниц, но они не являются реальными HTML документами, лишь несколько HTML шаблонов и гигантские базы данных. Эта структура упрощает и ускоряет сопровождение веб-приложений и доставку контента.'''
			zhopa2 = '''
Цель веб-сервера проста - обслуживать одновременно большое количество клиентов, максимально эффективно используя hardware.
Главная задача веб сервера принимать HTTP-запросы от пользователей, обрабатывать их, переводить в цифровой компьютерный код. Затем выдавать HTTP-ответы, преобразуя их из миллионов нолей и единичек в изображения, медиа-потоки, буквы, HTML страницы.
Любой веб сервер, для удобства его использования пользователями, должен иметь удобный веб-браузер. Он передает веб серверу запросы, преобразованные в URL-адреса интернет - ресурсов.
Наряду со стандартными функциями, некоторые веб серверы имеют дополнительные. Так, к примеру, соответствующее программное обеспечение может фиксировать число обращений пользователей к тому или иному ресурсу, записывать их в отдельный журнал. А еще они могут поддерживать HTTPS, что не маловажно для защищенного соединения между сайтами и пользователями. Зачастую веб-сервер устанавливается вместе с мейл-сервером. Это позволяет пользователям быстро переходить на страничку почты прямо с сайта, нажав всего лишь на одну гиперссылку.
Во-первых, веб-сервер хранит файлы веб-сайта, а именно все HTML документы и связанные с ними ресурсы, включая изображения, CSS стили, JavaScript файлы, шрифты и видео.
Технически, вы можете разместить все эти файлы на своем компьютере, но гораздо удобнее хранить их на выделенном веб-сервере, который[2]:
•	всегда запущен и работает
•	постоянно в сети Интернет
•	имеет тот же IP адрес все время (не все провайдеры предоставляют статический IP адрес для домашнего подключения)
•	обслуживается на стороне
По всем этим причинам, поиск хорошего хостинг-провайдера является ключевой частью создания вашего сайта. Рассмотрите различные предложения компаний и выберите то, что соответствует вашим потребностям и бюджету (предложения варьируются от бесплатных до тысяч долларов в месяц).'''
			bot.send_message(c.message.chat.id, zhopa1)
			bot.send_message(c.message.chat.id, zhopa2)
		elif c.data == 'tech_sozdaniya':
			zhopa1 = '''
	Технологии создания приложений на основе многоуровневой архитектуры клиент- Web-сервер-сервер баз данных.

	Архитектура клиент-сервер предназначена для разрешения проблем файл-серверных приложений путем разделения компонентов приложения и размещения их там, где они будут функционировать наиболее эффективно. Особенностью архитектуры клиент-сервер является использование выделенных серверов баз данных, понимающих запросы на языке структурированных запросов SQL (Structured Query Language) и выполняющих поиск, сортировку и агрегирование информации.
	Отличительная черта серверов БД — наличие справочника данных, в котором записана структура БД, ограничения целостности данных, форматы и даже серверные процедуры обработки данных по вызову или по событиям в программе. Объектами разработки в таких приложениях помимо диалога и логики обработки являются, прежде всего, реляционная модель данных и связанный с ней набор SQL-операторов для типовых запросов к базе данных.
	Большинство конфигураций клиент-сервер использует двухуровневую модель, в которой клиент обращается к услугам сервера. Предполагается, что диалоговые компоненты PS и PL размещаются на клиенте, что позволяет обеспечить графический интерфейс. Компоненты управления данными DS и FS размещаются на сервере, а диалог (PS, PL), логика BL и DL — на клиенте. Двухуровневое определение архитектуры клиент-сервер использует именно этот вариант: приложение работает у клиента, СУБД — на сервере.
	Поскольку эта схема предъявляет наименьшие требования к серверу, она обладает наилучшей масштабируемостью. Однако сложные приложения, вызывающие большое взаимодействие с БД, могут жестко загрузить как клиента, так и сеть. Результаты SQL-запроса должны вернуться клиенту для обработки, потому что там находится логика принятия решения. Такая схема приводит к дополнительному усложнению администрирования приложений, разбросанных по различным клиентским узлам.
	Для сокращения нагрузки на сеть и упрощения администрирования приложений компонент BL можно разместить на сервере. При этом вся логика принятия решений оформляется в виде хранимых процедур и выполняется на сервере БД.
	Хранимая процедура — процедура с операторами SQL для доступа к БД, вызываемая по имени с передачей требуемых параметров и выполняемая на сервере БД. Хранимые процедуры могут компилироваться, что повышает скорость их выполнения и сокращает нагрузку на сервер.
	Хранимые процедуры улучшают целостность приложений и БД, гарантируют актуальность коллективно используемых операций и вычислений. Улучшается сопровождение таких процедур, а также безопасность (нет прямого доступа к данным).
	Создание архитектуры клиент-сервер возможно и на основе многотерминальной системы. В этом случае в многозадачной среде сервера приложений выполняются программы пользователей, а клиентские узлы вырождены и представлены терминалами. Подобная схема информационной системы характерна для UNIX.
	В настоящее время архитектура клиент-сервер получила признание и широкое распространение как способ организации приложений для рабочих групп и информационных систем корпоративного уровня. Подобная организация работы повышает эффективность выполнения приложений за счет использования возможностей сервера БД, разгрузки сети и обеспечения контроля целостности данных.
	Двухуровневые схемы архитектуры клиент-сервер могут привести к некоторым проблемам в сложных информационных приложениях с множеством пользователей и запутанной логикой. Решением этих проблем может стать использование многоуровневой архитектуры.
	'''
			zhopa2 = '''
	Многоуровневая архитектура
	Многоуровневая архитектура стала развитием архитектуры клиент-сервер и в своей классической форме состоит из трех уровней:
	•	нижний уровень представляет собой приложения клиентов, выделенные для выполнения функций и логики представлений PS и PL и имеющие программный интерфейс для вызова приложения на среднем уровне;
	•	средний уровень представляет собой сервер приложений, на котором выполняется прикладная логика ВЬ и с которого логика обработки данных DL вызывает операции с базой данных DS;
	•	верхний уровень представляет собой удаленный специализированный сервер базы данных, выделенный для услуг обработки данных DS и файловых операций FS (без риска использования хранимых процедур).
	Подобную концепцию обработки данных пропагандируют, в частности, фирм Oracle, Sun, Borland и др.
	Трехуровневая архитектура позволяет еще больше сбалансировать нагрузку на разные узлы и сеть, а также способствует специализации инструментов для разработки приложений и устраняет недостатки двухуровневой модели клиент-сервер.
	Централизация логики приложения упрощает администрирование и сопровождение. Четко разделяются платформы и инструменты для реализации интерфейса и прикладной логики, что позволяет с наибольшей отдачей реализовывать их специалистам узкого профиля. Наконец, изменения прикладной логики не затрагивают интерфейса, и наоборот, Но поскольку границы между компонентами PL, BL и DL размыты, прикладная логика может появиться на всех трех уровнях. Сер- вер приложений с помощью монитора транзакций обеспечивает интерфейс с клиентами и другими серверами, может управлять транзакциями и гарантировать целостность распределенной базы данных. Средства удаленного вызова процедур наиболее соответствуют идее распределенных вычислений: они обеспечивают из любого узла сети вызов прикладной процедуры, расположенной на другом узле, передачу параметров, удаленную обработку и возврат результатов.
	С ростом систем клиент-сервер необходимость трех уровней становится все более очевидной. Продукты для трехзвенной архитектуры, так называемые мониторы транзакций, являются относительно новыми. Эти инструменты в основном ориентированы на среду UNIX, однако прикладные серверы можно строить на базе Qicrosoft Windows NT с использованием вызова удаленных процедур для организации связи клиентов с сервером приложений. На практике в локальной сети могут использоваться смешанные архитектуры (двухуровневые и трехуровневые) с одним и тем же сервером базы данных. С учетом глобальных связей архитектура может иметь больше трех звеньев. В настоящее время появились новые инструментальные средства для гибкой сегментации приложений клиент-сервер по различным узлам сети.
	Таким образом, многоуровневая архитектура распределенных приложений позволяет повысить эффективность работы корпоративной информационной системы и оптимизировать распределение ее программно-аппаратных ресурсов. Но пока на российском рынке по-прежнему доминирует архитектура клиент- сервер.
	'''
			zhopa3 = '''
	Интернет/интранет-технологии
	В развитии технологии Интернет/интранет основной акцент пока что делается на разработке инструментальных программных средств. В то же время наблюдается отсутствие развитых средств разработки приложений, работающих с базами данных. Компромиссным решением для создания удобных и простых в использовании и сопровождении информационных систем, эффективно работающих с базами данных, стало объединение Интернет/интранет-технологии с многоуровневой архитектурой. При этом структура информационного приложения приобретает следующий вид: браузер — сервер приложений — сервер баз данных — сервер динамических страниц — web-сервер.
	Благодаря интеграции Интернет/интранет-технологий и архитектуры клиент-сервер процесс внедрения и сопровождения корпоративной информационной системы существенно упрощается при сохранении достаточно высокой эффективности и простоты совместного использования информации.
	'''
			bot.send_message(c.message.chat.id, zhopa1)
			bot.send_message(c.message.chat.id, zhopa2)
			bot.send_message(c.message.chat.id, zhopa3)


	bot.polling(none_stop = True)
except:
	print('Что-то пошло не так')